// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  engineType    = "binary"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId  String    @unique
  email        String?   @unique
  name         String?
  emailOtp     String?
  phoneOtp     String?
  otpExpiry    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  profileImage String?
  role         String
  drafts       Folder[]

  // Role-specific data relationships
  teacherData  TeacherData?
  studentData  StudentData?
  coachingData CoachingData?

  templateForm TemplateForm[]
}

model TeacherData {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  name         String
  email        String
  school       String
  subject      String
  experience   String?
  studentCount String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StudentData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  name       String
  email      String
  grade      String
  targetExam String
  subjects   String[] // Array of subject strings
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CoachingData {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  centerName    String
  contactPerson String
  email         String
  phone         String
  location      String
  teacherCount  String?
  studentCount  String?
  targetExams   String[] // Array of exam strings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Question {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  question_number Int
  file_name       String?
  question_text   String
  isQuestionImage Boolean          @default(false)
  question_image  String?
  isOptionImage   Boolean          @default(false)
  options         String[]
  option_images   String[]
  section_name    String?
  question_type   String?
  topic           String?
  exam_name       String?
  subject         String?
  chapter         String?
  answer          String?
  flagged         Boolean?
  folderRelations FolderQuestion[] @relation("QuestionToFolderQuestion")

  @@index([question_number])
  @@index([exam_name])
  @@index([subject])
  @@index([chapter])
  @@index([flagged])
  @@index([section_name])
  @@index([question_text])
}

model Folder {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  userId            String           @db.ObjectId
  user              User             @relation(fields: [userId], references: [id])
  questionRelations FolderQuestion[] @relation("FolderToFolderQuestion")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([userId])
  @@index([name])
}

model FolderQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  folderId   String   @db.ObjectId
  questionId String   @db.ObjectId
  folder     Folder   @relation(fields: [folderId], references: [id], name: "FolderToFolderQuestion")
  question   Question @relation(fields: [questionId], references: [id], name: "QuestionToFolderQuestion")

  @@index([folderId])
  @@index([questionId])
}

model TemplateForm {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  templateName String
  institution  String?
  marks        String?
  time         String?
  exam         String?
  subject      String?
  logo         String?
  saveTemplate Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}
