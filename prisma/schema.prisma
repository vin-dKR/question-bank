// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  engineType = "binary"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId       String   @unique
  email             String   @unique
  name              String?
  profileImage      String?
  role              String   @default("student")
  folders           Folder[]
  collaborations    FolderCollaborator[]
  changeLogs        FolderChangeLog[]
  teacherData       TeacherData?
  coachingData      CoachingData?
  studentData       StudentData?
  templateForms     TemplateForm[]
  paperHistories    PaperHistory[]
  tests             Test[] @relation("TestCreator")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TeacherData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  email       String
  school      String
  subject     String
  experience  String?
  studentCount String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  email       String
  grade       String
  targetExam  String
  subjects    String[] // Array of subject strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoachingData {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  centerName    String
  contactPerson String
  email         String
  phone         String
  location      String
  teacherCount  String?
  studentCount  String?
  targetExams   String[] // Array of exam strings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Question {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  question_number  Int
  file_name       String?
  question_text   String
  isQuestionImage Boolean    @default(false)
  question_image  String?
  isOptionImage   Boolean    @default(false)
  options         String[]
  option_images   String[]
  section_name    String?
  question_type   String?
  topic           String?
  exam_name       String?
  subject         String?
  chapter         String?
  answer          String?
  flagged         Boolean?

  folderRelations FolderQuestion[] @relation("QuestionToFolderQuestion")
  testRelations   TestQuestion[] @relation("QuestionToTestQuestion")
  testAnswers     TestAnswer[]        @relation("QuestionToAnswer")
  paperHistoryRelations PaperHistoryQuestion[] @relation("QuestionToPaperHistory")

  @@index([question_number])
  @@index([exam_name])
  @@index([subject])
  @@index([chapter])
  @@index([flagged])
  @@index([section_name])
  @@index([question_text])
}

model Folder {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  questionRelations FolderQuestion[] @relation("FolderToFolderQuestion")
  collaborators FolderCollaborator[]
  changeLogs   FolderChangeLog[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([name])
}

model FolderQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  folderId   String   @db.ObjectId
  questionId String   @db.ObjectId
  position  Float    @default(0) // For ordering questions
  folder     Folder   @relation("FolderToFolderQuestion", fields: [folderId], references: [id])
  question   Question @relation("QuestionToFolderQuestion", fields: [questionId], references: [id])

  @@index([folderId])
  @@index([questionId])
  @@unique([folderId, questionId]) // Prevent duplicates
}

model FolderCollaborator {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  folderId   String   @db.ObjectId
  userId     String   @db.ObjectId
  role       String   // 'owner', 'editor', 'viewer'
  folder     Folder   @relation(fields: [folderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([folderId, userId])
  @@index([folderId])
  @@index([userId])
}

model FolderChangeLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  folderId   String   @db.ObjectId
  userId     String   @db.ObjectId
  action     String   // 'rename', 'add_question', 'remove_question', 'reorder', 'add_collaborator', 'remove_collaborator'
  details    String   // JSON string with action-specific details
  folder     Folder   @relation(fields: [folderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@index([folderId])
  @@index([userId])
  @@index([createdAt])
}

model TemplateForm {
    id                  String    @id   @default(auto())    @map("_id")    @db.ObjectId
    userId              String
    user                User      @relation(fields: [userId], references: [id])
    templateName        String
    institutionAddress  String?
    institution         String?
    marks               String?
    time                String?
    exam                String?
    subject             String?
    logo                String?
    standard            String?
    session             String?
    saveTemplate        Boolean
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([userId])
}

model PaperHistory {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    institution String?
    subject     String?
    marks       String?
    time        String?
    exam        String?
    logo        String?
    standard    String?
    session     String?
    questions   PaperHistoryQuestion[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([userId])
    @@index([createdAt])
}

model PaperHistoryQuestion {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    paperHistoryId  String       @db.ObjectId
    paperHistory    PaperHistory @relation(fields: [paperHistoryId], references: [id], onDelete: Cascade)
    questionId      String       @db.ObjectId
    question        Question     @relation("QuestionToPaperHistory", fields: [questionId], references: [id], onDelete: Cascade)
    marks           Int          @default(1)
    questionNumber  Int

    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt

    @@index([paperHistoryId])
    @@index([questionNumber])
}


// -------------------- TEST/EXAMINATION -------------------------- 

model Test {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  subject     String
  duration    Int
  totalMarks  Int
  createdBy   String       @db.ObjectId
  creator     User         @relation("TestCreator", fields: [createdBy], references: [id])
  questions   TestQuestion[]
  responses   StudentResponse[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([createdBy])
  @@index([subject])
}

model TestQuestion {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  testId       String   @db.ObjectId
  test         Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionId   String   @db.ObjectId
  question     Question @relation("QuestionToTestQuestion", fields: [questionId], references: [id], onDelete: Cascade)
  marks        Int      @default(1)
  questionNumber Int

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([testId])
  @@index([questionNumber])
}

model Student {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  rollNumber  String
  className   String
  responses   StudentResponse[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([className])
}

model StudentResponse {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  testId       String   @db.ObjectId
  test         Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId    String   @db.ObjectId
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers      TestAnswer[] @relation("StudentResponseToAnswer")
  score        Float
  totalMarks   Int
  percentage   Float
  submittedAt  DateTime @default(now())
  timeTaken    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([testId, studentId])
  @@index([testId])
  @@index([studentId])
  @@index([score])
  @@index([percentage])
}

model TestAnswer {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  studentResponseId String       @db.ObjectId
  studentResponse  StudentResponse @relation("StudentResponseToAnswer", fields: [studentResponseId], references: [id], onDelete: Cascade)
  questionId      String        @db.ObjectId
  question        Question      @relation("QuestionToAnswer", fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswer  String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  @@index([studentResponseId])
  @@index([questionId])
}
